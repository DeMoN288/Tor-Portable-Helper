# –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: https://github.com/Verity-Freedom/Tor-Portable

import os
import sys
import subprocess
import customtkinter as ctk
import requests
import zipfile
import threading
import webbrowser
import tkinter.filedialog as filedialog
import time
import socket
import tempfile
import shutil

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
try:
    BASE_DIR = os.path.dirname(os.path.abspath(__file__))
except NameError:
    BASE_DIR = os.path.dirname(os.path.abspath(sys.argv[0]))

INSTALL_DIR = os.path.join(BASE_DIR, "TorPortable")
IPNS_URL = "https://ipfs.io/ipns/k51qzi5uqu5dldod6robuflgitvj276br0xye3adipm3kc0bh17hfiv1e0hnp4/"
DOWNLOAD_URLS = {
    "antidetect": IPNS_URL + "AntiTor_win8+AntiDetect_current.zip",
    "standard": IPNS_URL + "AntiTor_win8+_current.zip",
}
PSIPHON_URL = "https://github.com/Verity-Freedom/Tor-Portable/releases/tag/v1.0"
ZERO_OMEGA_CONFIG_URL = IPNS_URL + "ZeroOmegaOptions-RU.bak"
CHROME_ZEROOMEGA_URL = "https://chromewebstore.google.com/detail/proxy-switchyomega-3-zero/pfnededegaaopdmhkdmcofjmoldfiped"
FIREFOX_ZEROOMEGA_URL = "https://addons.mozilla.org/en-US/firefox/addon/zeroomega/"
WEBRTC_CONTROL_URL = "https://chromewebstore.google.com/detail/webrtc-control/fjkmabmdepjfammlpliljpnbhleegehm"

LAUNCH_SCRIPT, SERVICE_MANAGER, CHANGE_MODE, UPDATER, DISCORD_PATCHER = "", "", "", "", ""
ctk.set_appearance_mode("Dark")
ctk.set_default_color_theme("blue")

# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ psutil –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏
try:
    import psutil
    PSUTIL_AVAILABLE = True
except ImportError:
    PSUTIL_AVAILABLE = False
    print("psutil –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install psutil")

class App(ctk.CTk):
    def __init__(self):
        super().__init__()
        self.title("Tor Portable Helper –¢–ï–°–¢")
        self.geometry("850x750")
        self.minsize(800, 700)
        
        self.grid_columnconfigure(0, weight=1)
        self.grid_rowconfigure(0, weight=0) 
        self.grid_rowconfigure(1, weight=1)

        self.install_dir = INSTALL_DIR
        self.update_paths()

        self.tor_monitor_running = False
        self.tor_monitor_thread = None
        self.tor_status_lock = threading.Lock()
        self.last_tor_status = {"text": "–ü—Ä–æ–≤–µ—Ä–∫–∞...", "color": "gray"}
        
        self.notification_frame = None
        self.notification_timer = None

        self.tab_view = ctk.CTkTabview(self, anchor="w")
        self.tab_view.grid(row=1, column=0, padx=20, pady=(0, 20), sticky="nsew")

        self.tab_view.add("1. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –ó–∞–ø—É—Å–∫")
        self.tab_view.add("2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ë—Ä–∞—É–∑–µ—Ä–∞")
        self.tab_view.add("3. –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")
        self.tab_view.add("4. –¢–µ—Å—Ç-–¥—Ä–∞–π–≤")
        self.tab_view.add("–ü–æ–º–æ—â—å –∏ –°—Å—ã–ª–∫–∏")

        self.create_main_tab()
        self.create_setup_tab()
        self.create_tools_tab()
        self.create_test_tab()
        self.create_help_tab()

        self.check_installation()
        self.after(100, self.start_tor_monitor)

    def update_paths(self):
        global LAUNCH_SCRIPT, SERVICE_MANAGER, CHANGE_MODE, UPDATER, DISCORD_PATCHER
        LAUNCH_SCRIPT = os.path.join(self.install_dir, "AntiTor.cmd")
        SERVICE_MANAGER = os.path.join(self.install_dir, "service-manager.cmd")
        CHANGE_MODE = os.path.join(self.install_dir, "change-mode.cmd")
        UPDATER = os.path.join(self.install_dir, "updater-win10+.cmd")
        DISCORD_PATCHER = os.path.join(self.install_dir, "discord-drover", "drover.exe")

    def log(self, message):
        self.log_textbox.configure(state="normal")
        self.log_textbox.insert("end", f"- {message}\n")
        self.log_textbox.configure(state="disabled")
        self.log_textbox.see("end")
        
    def show_notification(self, message, message_type="info"):
        if self.notification_timer: 
            self.after_cancel(self.notification_timer)
        if self.notification_frame: 
            self.notification_frame.destroy()
        
        colors = {"info": "#3498db", "warning": "#f39c12", "error": "#e74c3c", "success": "#2ecc71"}
        fg_color = colors.get(message_type, "#3498db")
        
        self.notification_frame = ctk.CTkFrame(self, height=40, fg_color=fg_color, corner_radius=8)
        self.notification_frame.grid(row=0, column=0, padx=20, pady=10, sticky="ew")
        self.notification_frame.grid_columnconfigure(0, weight=1)
        
        ctk.CTkLabel(self.notification_frame, text=message, text_color="white", font=ctk.CTkFont(size=14)).grid(row=0, column=0, padx=20, pady=10, sticky="w")
        ctk.CTkButton(self.notification_frame, text="‚úï", width=30, height=30, fg_color="transparent", hover_color="#000000", command=self.hide_notification).grid(row=0, column=1, padx=(0, 10), pady=5)
        
        self.notification_timer = self.after(3000, self.hide_notification)
        self.log(f"üîî {message}")

    def hide_notification(self):
        if self.notification_timer: 
            self.after_cancel(self.notification_timer)
        if self.notification_frame: 
            self.notification_frame.destroy()
        self.notification_frame = None

    def set_ui_state(self, enabled):
        state = "normal" if enabled else "disabled"
        for widget in [self.download_button, self.choose_dir_button, self.select_existing_button]:
             if widget: 
                 widget.configure(state=state)

    def choose_install_directory(self):
        directory = filedialog.askdirectory(title="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Tor Portable", initialdir=BASE_DIR)
        if directory:
            self.install_dir = directory
            self.update_paths()
            self.install_dir_label.configure(text=f"üìÅ –í—ã–±—Ä–∞–Ω–æ: {self.install_dir}")
            self.log(f"–í—ã–±—Ä–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {self.install_dir}")
            self.check_installation()
            return True
        return False

    def select_existing_installation(self):
        directory = filedialog.askdirectory(title="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º Tor Portable", initialdir="C:\\")
        if directory:
            if os.path.exists(os.path.join(directory, "AntiTor.cmd")):
                self.install_dir = directory
                self.update_paths()
                self.install_dir_label.configure(text=f"üìÅ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ: {self.install_dir}")
                self.log(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤: {self.install_dir}")
                self.check_installation()
                return True
            else:
                self.log("‚ùå –í –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω AntiTor.cmd")
                self.show_notification("‚ùå –í –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Tor Portable", "error")
                return False
        return False

    def check_installation(self):
        has_launch = os.path.exists(LAUNCH_SCRIPT)
        has_updater = os.path.exists(UPDATER)
        if has_launch:
            self.status_label.configure(text="‚úÖ Tor Portable –Ω–∞–π–¥–µ–Ω!", text_color="lightgreen")
            self.download_button.configure(state="normal", text="–ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
            self.service_manager_button.configure(state="normal")
            self.launch_browser_button.configure(state="normal")
            self.open_folder_button.configure(state="normal")
            self.update_button.configure(state="normal" if has_updater else "disabled")
            self.mode_button.configure(state="normal")
            self.discord_button.configure(state="normal" if os.path.exists(DISCORD_PATCHER) else "disabled")
        else:
            self.status_label.configure(text="‚ùå Tor Portable –Ω–µ –Ω–∞–π–¥–µ–Ω", text_color="orange")
            self.download_button.configure(state="normal", text="–°–∫–∞—á–∞—Ç—å –∏ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
            self.service_manager_button.configure(state="disabled")
            self.launch_browser_button.configure(state="disabled")
            self.open_folder_button.configure(state="disabled")
            self.update_button.configure(state="disabled")
            self.mode_button.configure(state="disabled")
            self.discord_button.configure(state="disabled")

    def open_download_dialog(self):
        dialog = ctk.CTkToplevel(self)
        dialog.title("–í—ã–±–æ—Ä –≤–µ—Ä—Å–∏–∏")
        dialog.geometry("550x350")
        dialog.resizable(False, False)
        dialog.grab_set()
        dialog.transient(self)
        ctk.CTkLabel(dialog, text="–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä—Å–∏—é –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è", font=ctk.CTkFont(size=18, weight="bold")).pack(pady=10)
        ctk.CTkLabel(dialog, text=f"–ü—Ä–æ–≥—Ä–∞–º–º–∞ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ –ø–∞–ø–∫—É:\n{self.install_dir}", text_color="yellow", wraplength=500).pack(pady=5)
        path_frame = ctk.CTkFrame(dialog, fg_color="transparent")
        path_frame.pack(pady=5)
        path_frame.grid_columnconfigure((0, 1), weight=1)
        ctk.CTkButton(path_frame, text="üìÅ –°–º–µ–Ω–∏—Ç—å –ø–∞–ø–∫—É —É—Å—Ç–∞–Ω–æ–≤–∫–∏", fg_color="gray", hover_color="#555555", width=200, command=lambda: (self.choose_install_directory(), dialog.destroy(), self.open_download_dialog())).grid(row=0, column=0, padx=5, pady=5)
        ctk.CTkButton(path_frame, text="üîç –í—ã–±—Ä–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É", fg_color="#3498db", hover_color="#2980b9", width=200, command=lambda: (self.select_existing_installation(), dialog.destroy(), self.open_download_dialog())).grid(row=0, column=1, padx=5, pady=5)
        version_frame = ctk.CTkFrame(dialog)
        version_frame.pack(pady=10, padx=20, fill="x")
        ctk.CTkButton(version_frame, text="–°–∫–∞—á–∞—Ç—å –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—É—é –≤–µ—Ä—Å–∏—é (AntiDetect)", command=lambda: (self.start_download(DOWNLOAD_URLS["antidetect"]), dialog.destroy())).pack(pady=10, padx=20, fill="x")
        ctk.CTkLabel(version_frame, text="–ù–µ—Ç .exe, –∞–Ω—Ç–∏–≤–∏—Ä—É—Å—ã –Ω–µ —Ä—É–≥–∞—é—Ç—Å—è.", text_color="gray").pack()
        ctk.CTkButton(version_frame, text="–°–∫–∞—á–∞—Ç—å –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –≤–µ—Ä—Å–∏—é", fg_color="gray", command=lambda: (self.start_download(DOWNLOAD_URLS["standard"]), dialog.destroy())).pack(pady=10, padx=20, fill="x")
        ctk.CTkLabel(version_frame, text="–ï—Å—Ç—å .exe, –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–æ–∂–Ω–∞—è —Ç—Ä–µ–≤–æ–≥–∞ –∞–Ω—Ç–∏–≤–∏—Ä—É—Å–∞.", text_color="gray").pack()

    def check_write_permission(self, directory):
        try:
            if not os.path.exists(directory):
                os.makedirs(directory)
            test_file = os.path.join(directory, "test_write.tmp")
            with open(test_file, 'w') as f:
                f.write('test')
            os.remove(test_file)
            return True
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å: {e}")
            return False

    def start_download(self, url):
        if not self.check_write_permission(self.install_dir):
            self.log(f"‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ –ø–∞–ø–∫—É: {self.install_dir}")
            self.status_label.configure(text="–û—à–∏–±–∫–∞ –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å!", text_color="red")
            self.show_notification("‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–∞–ø–∫—É", "error")
            return
        self.progress_bar.set(0)
        threading.Thread(target=self.download_and_install, args=(url,), daemon=True).start()

    def download_and_install(self, download_url):
        zip_filename = os.path.join(BASE_DIR, "tor_portable_temp.zip")
        try:
            self.set_ui_state(False)
            self.status_label.configure(text="–°–∫–∞—á–∏–≤–∞–Ω–∏–µ...")
            self.log(f"–ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤: {self.install_dir}")
            
            with requests.get(download_url, stream=True) as r:
                r.raise_for_status()
                total_size = int(r.headers.get('content-length', 0))
                downloaded_size = 0
                with open(zip_filename, 'wb') as f:
                    for chunk in r.iter_content(chunk_size=8192):
                        if chunk:
                            f.write(chunk)
                            downloaded_size += len(chunk)
                            progress = downloaded_size / total_size if total_size > 0 else 0
                            self.progress_bar.set(progress)
            
            self.status_label.configure(text="–†–∞—Å–ø–∞–∫–æ–≤–∫–∞...")
            self.log("–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞—é...")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Tor –ø–µ—Ä–µ–¥ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–æ–π
            self.kill_tor_process()
            time.sleep(2)
            
            with zipfile.ZipFile(zip_filename, 'r') as zip_ref:
                zip_ref.extractall(self.install_dir)
            
            self.log(f"–£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–æ –≤ '{self.install_dir}'")
            self.show_notification("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Tor Portable –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!", "success")
            self.log("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            
        except Exception as e:
            self.status_label.configure(text="–û—à–∏–±–∫–∞!", text_color="red")
            self.log(f"–û–®–ò–ë–ö–ê: {e}")
            self.show_notification(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {str(e)}", "error")
        finally:
            if os.path.exists(zip_filename):
                os.remove(zip_filename)
                self.log("–í—Ä–µ–º–µ–Ω–Ω—ã–π –∞—Ä—Ö–∏–≤ —É–¥–∞–ª—ë–Ω.")
            self.check_installation()
            self.set_ui_state(True)

    def is_tor_running(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å Tor"""
        if not PSUTIL_AVAILABLE:
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ netstat
            try:
                result = subprocess.run(['netstat', '-ano'], capture_output=True, text=True, creationflags=subprocess.CREATE_NO_WINDOW)
                return ':9050' in result.stdout and 'LISTENING' in result.stdout
            except:
                return False
        
        try:
            for proc in psutil.process_iter(['name']):
                if proc.info['name'] and 'tor.exe' in proc.info['name'].lower():
                    return True
            return False
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            return False

    def kill_tor_process(self):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã Tor"""
        if not PSUTIL_AVAILABLE:
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —á–µ—Ä–µ–∑ taskkill
            try:
                subprocess.run(['taskkill', '/f', '/im', 'tor.exe'], 
                             capture_output=True, creationflags=subprocess.CREATE_NO_WINDOW)
                self.log("–ü—Ä–æ—Ü–µ—Å—Å Tor –∑–∞–≤–µ—Ä—à–µ–Ω (taskkill)")
            except:
                pass
            return
        
        try:
            killed = False
            for proc in psutil.process_iter(['name', 'pid']):
                if proc.info['name'] and 'tor.exe' in proc.info['name'].lower():
                    try:
                        proc.kill()
                        proc.wait(timeout=5)
                        self.log(f"–ü—Ä–æ—Ü–µ—Å—Å Tor (PID: {proc.info['pid']}) –∑–∞–≤–µ—Ä—à–µ–Ω")
                        killed = True
                    except (psutil.NoSuchProcess, psutil.TimeoutExpired):
                        pass
            if not killed:
                self.log("–ü—Ä–æ—Ü–µ—Å—Å Tor –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ Tor: {e}")

    def run_script_silent(self, script_path):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç –±–µ–∑ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–∫–Ω–∞"""
        if not os.path.exists(script_path):
            self.log(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {script_path}")
            self.show_notification(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {os.path.basename(script_path)}", "error")
            return False
        
        script_name = os.path.basename(script_path)
        working_directory = os.path.dirname(script_path)
        
        try:
            # –î–ª—è —Å–∫—Ä–∏–ø—Ç–æ–≤ Tor —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
            if script_path in [LAUNCH_SCRIPT, SERVICE_MANAGER, CHANGE_MODE, UPDATER]:
                self.log(f"–ó–∞–≤–µ—Ä—à–∞–µ–º Tor –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º {script_name}...")
                self.kill_tor_process()
                time.sleep(2)
            
            self.log(f"–ó–∞–ø—É—Å–∫–∞—é {script_name} (—Ç–∏—Ö–∏–π —Ä–µ–∂–∏–º)...")
            
            # –ó–∞–ø—É—Å–∫ –±–µ–∑ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–∫–Ω–∞
            startupinfo = subprocess.STARTUPINFO()
            startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW
            startupinfo.wShowWindow = 0  # SW_HIDE
            
            process = subprocess.Popen(
                [script_path],
                cwd=working_directory,
                startupinfo=startupinfo,
                creationflags=subprocess.CREATE_NO_WINDOW
            )
            
            # –î–ª—è service-manager –¥–∞–µ–º –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –∑–∞–ø—É—Å–∫
            if script_path == SERVICE_MANAGER:
                self.after(8000, self.force_tor_check)
            elif script_path in [LAUNCH_SCRIPT, CHANGE_MODE, UPDATER]:
                self.after(5000, self.force_tor_check)
                
            self.log(f"‚úÖ {script_name} –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ {script_name}: {e}")
            self.show_notification(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ {script_name}", "error")
            return False

    def run_script(self, script_path):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        return self.run_script_silent(script_path)

    def _check_tor_status(self):
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(3)
            if sock.connect_ex(('127.0.0.1', 9050)) != 0:
                return {"text": "‚ùå –ü–æ—Ä—Ç 9050 –∑–∞–∫—Ä—ã—Ç", "color": "red"}
            sock.close()
            
            # –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ Tor Project
            proxies = {'http': 'socks5h://127.0.0.1:9050', 'https': 'socks5h://127.0.0.1:9050'}
            
            response = requests.get("https://check.torproject.org/", proxies=proxies, timeout=10)
            if "Congratulations" in response.text:
                return {"text": "‚úÖ –û–Ω–ª–∞–π–Ω", "color": "lightgreen"}
            return {"text": "‚ö†Ô∏è –û–Ω–ª–∞–π–Ω (–Ω–µ Tor)", "color": "yellow"}
        except requests.exceptions.Timeout:
            return {"text": "‚ùå –¢–∞–π–º–∞—É—Ç", "color": "orange"}
        except requests.exceptions.RequestException:
            return {"text": "‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏", "color": "red"}
        except Exception:
            return {"text": "‚ùå –û—Ñ–ª–∞–π–Ω", "color": "orange"}

    def create_main_tab(self):
        tab = self.tab_view.tab("1. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –ó–∞–ø—É—Å–∫")
        tab.grid_columnconfigure(0, weight=1)
        
        self.install_dir_label = ctk.CTkLabel(tab, text=f"üìç –¢–µ–∫—É—â–∏–π –ø—É—Ç—å: {self.install_dir}", text_color="lightblue", wraplength=700)
        self.install_dir_label.pack(pady=(10, 10))
        
        path_buttons_frame = ctk.CTkFrame(tab, fg_color="transparent")
        path_buttons_frame.pack(pady=5)
        path_buttons_frame.grid_columnconfigure((0, 1), weight=1)
        
        self.choose_dir_button = ctk.CTkButton(path_buttons_frame, text="üìÅ –í—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏", fg_color="gray", hover_color="#555555", command=self.choose_install_directory)
        self.choose_dir_button.grid(row=0, column=0, padx=5, pady=5, sticky="ew")
        
        self.select_existing_button = ctk.CTkButton(path_buttons_frame, text="üîç –£–∫–∞–∑–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É", fg_color="#3498db", hover_color="#2980b9", command=self.select_existing_installation)
        self.select_existing_button.grid(row=0, column=1, padx=5, pady=5, sticky="ew")
        
        self.status_label = ctk.CTkLabel(tab, text="", font=ctk.CTkFont(size=20, weight="bold"))
        self.status_label.pack(pady=20)
        
        ctk.CTkLabel(tab, text="–î–µ–π—Å—Ç–≤–∏—è —Å Tor Portable", font=ctk.CTkFont(size=14, weight="bold")).pack(pady=(10, 0))
        
        self.download_button = ctk.CTkButton(tab, text="–°–∫–∞—á–∞—Ç—å –∏ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", command=self.open_download_dialog, height=40)
        self.download_button.pack(pady=5, padx=20, fill="x")
        
        self.progress_bar = ctk.CTkProgressBar(tab, width=400)
        self.progress_bar.set(0)
        self.progress_bar.pack(pady=(0, 10))
        
        self.tor_status_label = ctk.CTkLabel(tab, text="–°—Ç–∞—Ç—É—Å Tor: –ü—Ä–æ–≤–µ—Ä–∫–∞...", text_color="gray", font=ctk.CTkFont(size=14))
        self.tor_status_label.pack(pady=5)
        
        self.check_status_button = ctk.CTkButton(tab, text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å Tor", command=self.force_tor_check, fg_color="gray", height=28)
        self.check_status_button.pack(pady=5)
        
        ctk.CTkLabel(tab, text="–ó–∞–ø—É—Å–∫ Tor Portable", font=ctk.CTkFont(size=14, weight="bold")).pack(pady=(10, 0))
        
        self.service_manager_button = ctk.CTkButton(tab, text="–ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–∞–∫ –°–ª—É–∂–±—É (–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è, –±–µ–∑ –æ–∫–Ω–∞)", command=lambda: self.run_script_silent(SERVICE_MANAGER), height=40, fg_color="#2ecc71", hover_color="#27ae60", font=ctk.CTkFont(size=14, weight="bold"))
        self.service_manager_button.pack(pady=5, padx=20, fill="x")
        
        self.launch_browser_button = ctk.CTkButton(tab, text="–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ (—á–µ—Ä–µ–∑ AntiTor.cmd)", command=lambda: self.run_script_silent(LAUNCH_SCRIPT), height=40)
        self.launch_browser_button.pack(pady=5, padx=20, fill="x")
        
        self.open_folder_button = ctk.CTkButton(tab, text="–û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É TorPortable", fg_color="gray", command=lambda: os.startfile(self.install_dir))
        self.open_folder_button.pack(pady=(20, 5), padx=20, fill="x")
        
        self.log_textbox = ctk.CTkTextbox(tab, height=150)
        self.log_textbox.pack(pady=10, padx=20, fill="both", expand=True)
        self.log_textbox.configure(state="disabled")

    def start_tor_monitor(self):
        if self.tor_monitor_running: 
            return
        self.tor_monitor_running = True
        self.tor_monitor_thread = threading.Thread(target=self._tor_monitor_loop, daemon=True)
        self.tor_monitor_thread.start()

    def _tor_monitor_loop(self):
        while self.tor_monitor_running:
            try:
                status = self._check_tor_status()
                with self.tor_status_lock:
                    if status != self.last_tor_status:
                        self.last_tor_status = status
                        self.after(0, self._update_tor_status_gui)
            except Exception as e:
                self.log(f"–û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–µ Tor: {e}")
            time.sleep(15)

    def _update_tor_status_gui(self):
        with self.tor_status_lock: 
            status = self.last_tor_status
        self.tor_status_label.configure(text=f"–°—Ç–∞—Ç—É—Å Tor: {status['text']}", text_color=status['color'])

    def _force_check_and_update(self):
        self.after(0, lambda: self.tor_status_label.configure(text="–°—Ç–∞—Ç—É—Å Tor: –ü—Ä–æ–≤–µ—Ä–∫–∞...", text_color="gray"))
        self.after(0, lambda: self.check_status_button.configure(state="disabled"))
        
        self.log("\n=== –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê TOR ===")
        status = self._check_tor_status()
        self.log(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: {status['text']}")
        
        with self.tor_status_lock: 
            self.last_tor_status = status
        
        self.after(0, self._update_tor_status_gui)
        self.after(0, lambda: self.check_status_button.configure(state="normal"))

    def force_tor_check(self):
        threading.Thread(target=self._force_check_and_update, daemon=True).start()

    def destroy(self):
        self.tor_monitor_running = False
        if self.tor_monitor_thread and self.tor_monitor_thread.is_alive():
            self.tor_monitor_thread.join(timeout=1.0)
        super().destroy()

    def create_setup_tab(self):
        tab = self.tab_view.tab("2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ë—Ä–∞—É–∑–µ—Ä–∞")
        frame = ctk.CTkScrollableFrame(tab)
        frame.pack(fill="both", expand=True, padx=10, pady=10)
        
        ctk.CTkLabel(frame, text="–®–∞–≥ 1: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ ZeroOmega", font=ctk.CTkFont(size=16, weight="bold")).pack(anchor="w", pady=(0, 10))
        ctk.CTkButton(frame, text="–î–ª—è Chrome / Edge / Opera", command=lambda: webbrowser.open_new_tab(CHROME_ZEROOMEGA_URL)).pack(fill="x", pady=5)
        ctk.CTkButton(frame, text="–î–ª—è Firefox", command=lambda: webbrowser.open_new_tab(FIREFOX_ZEROOMEGA_URL)).pack(fill="x", pady=5)
        
        ctk.CTkLabel(frame, text="–®–∞–≥ 2: –ó–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ ZeroOmega", font=ctk.CTkFont(size=16, weight="bold")).pack(anchor="w", pady=(20, 10))
        ctk.CTkLabel(frame, text='–û—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è -> Import/Export -> –≤—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –≤ –ø–æ–ª–µ "Restore from online" -> –Ω–∞–∂–º–∏—Ç–µ Restore.', wraplength=700).pack(anchor="w")
        
        config_frame = ctk.CTkFrame(frame, fg_color="transparent")
        config_frame.pack(fill="x", pady=10)
        config_frame.grid_columnconfigure(0, weight=1)
        
        config_entry = ctk.CTkEntry(config_frame)
        config_entry.insert(0, ZERO_OMEGA_CONFIG_URL)
        config_entry.configure(state="readonly")
        config_entry.grid(row=0, column=0, sticky="ew")
        
        ctk.CTkButton(config_frame, text="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", width=120, command=lambda: (self.clipboard_clear(), self.clipboard_append(ZERO_OMEGA_CONFIG_URL), self.show_notification("üìã –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ–Ω—Ñ–∏–≥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞", "info"))).grid(row=0, column=1, padx=(10, 0))
        
        ctk.CTkLabel(frame, text="–®–∞–≥ 3 (–í–∞–∂–Ω–æ!): –ó–∞–∫—Ä–æ–π—Ç–µ —É—Ç–µ—á–∫—É IP –≤ Chrome-–±—Ä–∞—É–∑–µ—Ä–∞—Ö", font=ctk.CTkFont(size=16, weight="bold")).pack(anchor="w", pady=(20, 10))
        ctk.CTkLabel(frame, text='–ë—Ä–∞—É–∑–µ—Ä—ã –Ω–∞ –¥–≤–∏–∂–∫–µ Chromium –∏–º–µ—é—Ç —É—è–∑–≤–∏–º–æ—Å—Ç—å WebRTC. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —ç—Ç–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ, —á—Ç–æ–±—ã –µ—ë –∑–∞–∫—Ä—ã—Ç—å.', wraplength=700).pack(anchor="w")
        ctk.CTkButton(frame, text="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å WebRTC Control", fg_color="#e74c3c", hover_color="#c0392b", command=lambda: webbrowser.open_new_tab(WEBRTC_CONTROL_URL)).pack(fill="x", pady=5)

    def create_tools_tab(self):
        tab = self.tab_view.tab("3. –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")
        tab.grid_columnconfigure((0, 1), weight=1)
        
        self.update_button = ctk.CTkButton(tab, text="–û–±–Ω–æ–≤–∏—Ç—å Tor Portable", command=lambda: self.run_script_silent(UPDATER))
        self.update_button.grid(row=0, column=0, padx=10, pady=10, sticky="ew")
        
        self.mode_button = ctk.CTkButton(tab, text="–°–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º (Pro/Default)", command=lambda: self.run_script_silent(CHANGE_MODE))
        self.mode_button.grid(row=0, column=1, padx=10, pady=10, sticky="ew")
        
        self.discord_button = ctk.CTkButton(tab, text="–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç Discord", command=lambda: self.run_script_silent(DISCORD_PATCHER))
        self.discord_button.grid(row=1, column=0, padx=10, pady=5, sticky="ew")
        
        ctk.CTkButton(tab, text="–°–∫–∞—á–∞—Ç—å Psiphon TM ('–¢–∞—Ä–∞–Ω')", fg_color="#f39c12", hover_color="#d35400", command=lambda: webbrowser.open_new_tab(PSIPHON_URL)).grid(row=1, column=1, padx=10, pady=5, sticky="ew")
        
        ctk.CTkLabel(tab, text="–ü–æ—Å–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è Psiphon TM —Ä–∞—Å–ø–∞–∫—É–π—Ç–µ –µ–≥–æ, –∑–∞–ø—É—Å—Ç–∏—Ç–µ runme.cmd –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º PROXY –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–∏ ZeroOmega.", wraplength=700).grid(row=2, column=0, columnspan=2, padx=10, pady=20)

    def create_test_tab(self):
        tab = self.tab_view.tab("4. –¢–µ—Å—Ç-–¥—Ä–∞–π–≤")
        frame = ctk.CTkScrollableFrame(tab)
        frame.pack(fill="both", expand=True, padx=10, pady=10)
        
        ctk.CTkLabel(frame, text="–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤—ã–≤–∞–µ–º –í–ï–°–¨ –ò–ù–¢–ï–†–ù–ï–¢ –∏–≥—Ä–∞—é—á–∏!", font=ctk.CTkFont(size=18, weight="bold")).pack(pady=10)
        
        tests = [
            ("1. –î–æ—Å—Ç—É–ø –≤ Darknet", "–ü–æ–∏—Å–∫–æ–≤–∏–∫ DuckDuckGo –≤ —Å–µ—Ç–∏ .onion", "https://duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion"),
            ("2. –ë–∞–∑–æ–≤—ã–π –æ–±—Ö–æ–¥ (Habr)", "–°—Ç–∞—Ç—å—è –æ VPN, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤ –†–§", "https://habr.com/ru/articles/849092/"),
            ("3. –û–±—Ö–æ–¥ –≥–µ–æ–±–ª–æ–∫–∞ (YouTube)", "–í–∏–¥–µ–æ, –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤ –†–§", "https://www.youtube.com/watch?v=-kcOpyM9cBg"),
            ("4. –û–±—Ö–æ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ Tor (YouTube)", "–í–∏–¥–µ–æ, –±–ª–æ–∫–∏—Ä—É—é—â–µ–µ –æ–±—ã—á–Ω—ã–π Tor. –ü–æ–º–æ–∂–µ—Ç —Ä–µ–∂–∏–º 'Pro'", "https://www.youtube.com/watch?v=W9lsWI7zhTY"),
            ("5. '–§–∏–Ω–∞–ª—å–Ω—ã–π –±–æ—Å—Å' (Grok)", "–°–∞–π—Ç —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∑–∞—â–∏—Ç–æ–π. –ü–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è Psiphon TM + —Ä–µ–∂–∏–º PROXY", "https://grok.com/")
        ]
        
        for title, desc, url in tests:
            test_frame = ctk.CTkFrame(frame)
            test_frame.pack(fill="x", pady=5)
            test_frame.grid_columnconfigure(0, weight=1)
            
            ctk.CTkLabel(test_frame, text=title, font=ctk.CTkFont(weight="bold")).grid(row=0, column=0, padx=10, pady=(5, 0), sticky="w")
            ctk.CTkLabel(test_frame, text=desc, text_color="gray", wraplength=550).grid(row=1, column=0, padx=10, pady=(0, 5), sticky="w")
            ctk.CTkButton(test_frame, text="–û—Ç–∫—Ä—ã—Ç—å", width=100, command=lambda u=url: webbrowser.open_new_tab(u)).grid(row=0, column=1, rowspan=2, padx=10)

    def create_help_tab(self):
        tab = self.tab_view.tab("–ü–æ–º–æ—â—å –∏ –°—Å—ã–ª–∫–∏")
        frame = ctk.CTkScrollableFrame(tab)
        frame.pack(fill="both", expand=True, padx=10, pady=10)
        
        ctk.CTkLabel(frame, text="–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –∏–∑ –≥–∞–π–¥–∞", font=ctk.CTkFont(size=16, weight="bold")).pack(anchor="w", pady=(5, 5))
        
        links_frame = ctk.CTkFrame(frame, fg_color="transparent")
        links_frame.pack(fill="x", pady=5)
        links_frame.grid_columnconfigure((0, 1), weight=1)
        
        ctk.CTkButton(links_frame, text="–í–∏–¥–µ–æ–≥–∞–π–¥", command=lambda: webbrowser.open_new_tab("https://ipfs.io/ipfs/bafybeicgytyokctpwsuya66yvzwxnjmahexcgisaivcdxszohprygxvzbq/–ù–û–í–´–ô%20–æ–±—Ö–æ–¥%20–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏%20—á–µ—Ä–µ–∑%20—Å–µ—Ä–≤–µ—Ä–∞%20TOR%20ÔΩú%20AntiTor%20%28TorPortable%29%20%5B8HO9jhADip4%5D.webm")).grid(row=0, column=0, padx=5, pady=5, sticky="ew")
        ctk.CTkButton(links_frame, text="–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (GitHub)", command=lambda: webbrowser.open_new_tab("https://github.com/Verity-Freedom/Tor-Portable")).grid(row=0, column=1, padx=5, pady=5, sticky="ew")
        ctk.CTkButton(links_frame, text="Telegram-–∫–∞–Ω–∞–ª –∞–≤—Ç–æ—Ä–∞", command=lambda: webbrowser.open_new_tab("https://t.me/Tor_Portable")).grid(row=1, column=0, padx=5, pady=5, sticky="ew")
        ctk.CTkButton(links_frame, text="–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∞–≤—Ç–æ—Ä–∞", command=lambda: webbrowser.open_new_tab("https://www.donationalerts.com/r/verity_freedom")).grid(row=1, column=1, padx=5, pady=5, sticky="ew")
        
        ctk.CTkLabel(frame, text="–ß–∞—Å—Ç—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ —Ä–µ—à–µ–Ω–∏—è", font=ctk.CTkFont(size=16, weight="bold")).pack(anchor="w", pady=(20, 10))
        
        problems = {
            "–ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–æ–±–µ–ª—ã –∏–ª–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü—É": "–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç–µ –ø–∞–ø–∫—É —Å –ø—Ä–æ–≥—Ä–∞–º–º–æ–π –≤ –∫–æ—Ä–µ–Ω—å –¥–∏—Å–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä C:\\TorHelper.", 
            "–ê–Ω—Ç–∏–≤–∏—Ä—É—Å —Ä—É–≥–∞–µ—Ç—Å—è –Ω–∞ –≤–∏—Ä—É—Å": "–≠—Ç–æ –ª–æ–∂–Ω–∞—è —Ç—Ä–µ–≤–æ–≥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—É—é –≤–µ—Ä—Å–∏—é (AntiDetect)'.", 
            "–ù–∏–∑–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å / –í–∏–¥–µ–æ —Ç–æ—Ä–º–æ–∑–∏—Ç": "–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ —Ä–µ–∂–∏–º 'Pro' –Ω–∞ –≤–∫–ª–∞–¥–∫–µ '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã'.", 
            "–°–∞–π—Ç –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è": "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Tor –∑–∞–ø—É—â–µ–Ω –∏ –≤—ã–±—Ä–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –≤ ZeroOmega.", 
            "–ü–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å": "–ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ñ–æ–Ω–æ–≤—É—é —Å–ª—É–∂–±—É –∏ —Å–Ω–æ–≤–∞ –Ω–∞–∂–º–∏—Ç–µ Restore –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö ZeroOmega."
        }
        
        for problem, solution in problems.items():
            ctk.CTkLabel(frame, text=f"‚ùì {problem}", font=ctk.CTkFont(size=14, weight="bold")).pack(anchor="w", pady=(15, 5))
            ctk.CTkLabel(frame, text=f"üí° {solution}", wraplength=700, justify="left").pack(anchor="w", padx=15)


if __name__ == "__main__":
    app = App()

    app.mainloop()
